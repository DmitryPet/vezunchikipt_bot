import logging
from aiogram import Bot, Dispatcher, types
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton
from aiogram.utils import executor
import os
from dotenv import load_dotenv

load_dotenv()
API_TOKEN = os.getenv("BOT_TOKEN")

logging.basicConfig(level=logging.INFO)
bot = Bot(token=API_TOKEN)
dp = Dispatcher(bot)

users = {}

main_kb = ReplyKeyboardMarkup(resize_keyboard=True)
main_kb.add(KeyboardButton("üöó –ò—â—É –ø–æ–ø—É—Ç–∫—É"), KeyboardButton("üì¶ –ü–µ—Ä–µ–¥–∞—Ç—å –ø–æ—Å—ã–ª–∫—É"))
main_kb.add(KeyboardButton("üèñ –•–æ—á—É –∫ –æ–∫–µ–∞–Ω—É"), KeyboardButton("üõí –ó–∞–µ–∑–¥ –≤ –º–∞–≥–∞–∑–∏–Ω—ã"))
main_kb.add(KeyboardButton("üí¨ –°–æ–≤–µ—Ç—ã –∏ –ª–æ–≥–∏—Å—Ç–∏–∫–∞"), KeyboardButton("‚úçÔ∏è –ù–∞—Å—Ç—Ä–æ–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å"))

@dp.message_handler(commands=['start'])
async def start_handler(message: types.Message):
    users[message.from_user.id] = {"name": message.from_user.full_name}
    await message.answer("–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –í–ï–ó–£–ù—á–∏–∫ ü§ù\n–ß–µ–º –∑–∞–π–º—ë–º—Å—è?", reply_markup=main_kb)

@dp.message_handler(lambda message: message.text == "‚úçÔ∏è –ù–∞—Å—Ç—Ä–æ–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å")
async def profile_setup(message: types.Message):
    await message.answer("–ù–∞–ø–∏—à–∏ –≥–æ—Ä–æ–¥, –≤ –∫–æ—Ç–æ—Ä–æ–º —Ç—ã –∂–∏–≤—ë—à—å:")

@dp.message_handler(lambda message: message.text == "üöó –ò—â—É –ø–æ–ø—É—Ç–∫—É")
async def find_ride(message: types.Message):
    await message.answer("–£–∫–∞–∂–∏ –º–∞—Ä—à—Ä—É—Ç –∏ –¥–∞—Ç—É –ø–æ–µ–∑–¥–∫–∏. –Ø –ø–æ—Å—Ç–∞—Ä–∞—é—Å—å –Ω–∞–π—Ç–∏ —Ç–µ–±–µ –ø–æ–ø—É—Ç—á–∏–∫–æ–≤!")

@dp.message_handler(lambda message: message.text == "üì¶ –ü–µ—Ä–µ–¥–∞—Ç—å –ø–æ—Å—ã–ª–∫—É")
async def send_package(message: types.Message):
    await message.answer("–ù–∞–ø–∏—à–∏ –æ—Ç–∫—É–¥–∞ –∏ –∫—É–¥–∞ –ø–µ—Ä–µ–¥–∞—Ç—å –ø–æ—Å—ã–ª–∫—É. –î–æ–±–∞–≤—å –¥–∞—Ç—É, –µ—Å–ª–∏ –≤–∞–∂–Ω–æ.")

@dp.message_handler(lambda message: message.text == "üèñ –•–æ—á—É –∫ –æ–∫–µ–∞–Ω—É")
async def to_beach(message: types.Message):
    await message.answer("–ö—Ä–∞—Å–∞–≤—á–∏–∫! –Ø —Å–æ–æ–±—â—É –≤—Å–µ–º, –∫—Ç–æ —Ç–æ–∂–µ —Ö–æ—á–µ—Ç –∫ –æ–∫–µ–∞–Ω—É üåä")

@dp.message_handler(lambda message: message.text == "üõí –ó–∞–µ–∑–¥ –≤ –º–∞–≥–∞–∑–∏–Ω—ã")
async def to_shops(message: types.Message):
    await message.answer("–ù–∞–ø–∏—à–∏, –≤ –∫–∞–∫–æ–π –º–∞–≥–∞–∑–∏–Ω –∏ –≥–æ—Ä–æ–¥ —Ç—ã —Ö–æ—á–µ—à—å –∑–∞–µ—Ö–∞—Ç—å, –∏ –∫–æ–≥–¥–∞.")

@dp.message_handler(lambda message: message.text == "üí¨ –°–æ–≤–µ—Ç—ã –∏ –ª–æ–≥–∏—Å—Ç–∏–∫–∞")
async def logistics_tips(message: types.Message):
    await message.answer("–°–ø—Ä–æ—Å–∏ –ø—Ä–æ –º–∞—Ä—à—Ä—É—Ç, –ø–∞—Ä–∫–æ–≤–∫—É –∏–ª–∏ –ø–æ–¥–µ–ª–∏—Å—å –ª–∞–π—Ñ—Ö–∞–∫–æ–º!")

if __name__ == '__main__':
    executor.start_polling(dp, skip_updates=True)